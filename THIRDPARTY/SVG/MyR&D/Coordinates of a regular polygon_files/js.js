    function Set_Cookie( name, value, expires, path, domain, secure ) {  var today=new Date(); today.setTime( today.getTime() );  if ( expires ) { expires=expires * 1000 * 60 * 60 * 24; } var expires_date=new Date( today.getTime() + (expires) ); document.cookie=name + "=" +escape( value ) + ( ( expires ) ? ";expires=" + expires_date.toGMTString() : "" ) + ( ( path ) ? ";path=" + path : "" ) + ( ( domain ) ? ";domain=" + domain : "" ) + ( ( secure ) ? ";secure" : "" ); } var delete_cookie=function(name) { document.cookie=name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;'; }; function Get_Cookie( check_name ) {   var a_all_cookies=document.cookie.split( ';' ); var a_temp_cookie=''; var cookie_name=''; var cookie_value=''; var b_cookie_found=false;  for ( i=0; i < a_all_cookies.length; i++ ) {  a_temp_cookie=a_all_cookies[i].split( '=' );  cookie_name=a_temp_cookie[0].replace(/^\s+|\s+$/g, '');  if ( cookie_name==check_name ) { b_cookie_found=true;  if ( a_temp_cookie.length > 1 ) { cookie_value=unescape( a_temp_cookie[1].replace(/^\s+|\s+$/g, '') ); }  return cookie_value; break; } a_temp_cookie=null; cookie_name=''; } if ( !b_cookie_found ) { return null; } } function initPage(param)  {} function tabletMode() { return Get_Cookie( "tablet" ) !=null } function checkForEnterKey(e) { var key=window.event ? e.keyCode : e.which; if(key==84)  { Set_Cookie( 'tablet', 'true', '', '/', '', '' ); location.reload(true); } else if(key==85)  { delete_cookie('tablet'); location.reload(true); } else if(key==13) doSearch(); }  var addthis_config={ data_track_clickback: false };  function commentOnPage() { document.getElementById('refpage').value=document.title; document.getElementById('feedback').submit(); } function emailPage() { document.getElementById('docTitle').value=document.title; document.getElementById('docUrl').value=myUrl(); document.getElementById('emailto').submit(); }  function browserIsIE() { var browserName=navigator.appName; var res= (browserName=="Microsoft Internet Explorer"); return res; } function isHosted()  { var loc=location.href.toLowerCase(); return (loc.substring(0,4)=="http"); } function myUrl()  { return (window.location.href); }          var dict=[]; var searchRq=false;  function doSearch() { var searchStr=document.getElementById("searchArg").value; if(searchStr.length==0) return; var b=document.getElementById("searchbuffer"); searchRq=true;  if (location.href.indexOf("common")>0) b.src="indexpage.html?"+searchStr; else if(location.href.indexOf("tocs")>0) b.src="../common/indexpage.html?"+searchStr; else b.src="common/indexpage.html?"+searchStr; } function continueSearch()  { if(!parent.searchRq) return;  parent.searchRq=false; var srchStr=decodeURI(location.search.substr(1)); var entries=document.body.innerHTML.toLowerCase();  makeDict(entries);  var keywordSet=srchStr.split(" ");   for(var j=0; j<keywordSet.length; j++) { result=validateKeyword(keywordSet[j]); if(result>=0) { parent.location.href="../" + dict[result] + ".html"; return; } }  parent.location.href="notfound.html";  } function validateKeyword(arg)    { var keyword=arg.toLowerCase(); var smap=mapOf(keyword); var dmap, closestWordIndex, bestScore=999, thisWord; for (var wordIndex=0; wordIndex<dict.length; wordIndex++) { thisWord=dict[wordIndex]; if (thisWord==keyword) return wordIndex; else { dmap=mapOf(thisWord);  errors=compare(dmap, smap); if(errors < bestScore) { bestScore=errors; closestWordIndex=wordIndex; } } } if (bestScore < 3 ) return closestWordIndex; else return -1; } function mapOf(s) { var c, map=new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0); for ( var i=0; i<s.length; i++) { c=s.charCodeAt(i); if(c>=97 && c<=122)  map[c-97]++; } return map; } function compare(dmap, smap) { var errors=0; for (var i=0; i<26; i++) { errors +=Math.abs(dmap[i]-smap[i]); } return errors; } function makeDict(entries) { var wordStart=0, wordEnd, word; while(true) { wordStart=entries.indexOf("<h4>", wordStart+1); if(wordStart<0) break;  wordEnd=entries.indexOf("</h4>", wordStart); word=entries.substring(wordStart+4, wordEnd); dict.push(word); } }  function reveal(obj) { document.getElementById(obj).style.visibility='visible'; } function swap(me, obj) { me.style.display="none"; document.getElementById(obj).style.display="inline"; } function millisecTimeStamp() { var t=new Date(); return t.getTime(); }  function showCalc() { window.open('calculator.html', 'mywindow', 'width=800,height=730,status=no,resizable=yes,scrollbars=yes') }    var device=null; var appletLoadRq; var widthLoadRq; var heightLoadRq; var appletName; var appletContainerDiv=null; var htmlParams="";  var appletWid=0; var appletHt=0; var html5AppletIframe=null; var iFrameSrcFile="";  function loadActualApplet()  {  var ifrm=document.createElement('iframe'); ifrm.setAttribute("name", "iframe"); ifrm.setAttribute("frameBorder","0"); ifrm.setAttribute("width", ""+appletWid); ifrm.setAttribute("height", ""+appletHt); ifrm.setAttribute("scrolling", "no"); ifrm.style.overflow="hidden"; ifrm.style.border="1px solid #bbbbdd";  appletContainerDiv.innerHTML="";  appletContainerDiv.appendChild(ifrm); html5AppletIframe=ifrm;     var srcFileName="common/" + iFrameSrcFile;  if(location.href.indexOf("src")>0) srcFileName +="debug";  srcFileName +=".html"; ifrm.src=srcFileName + "?applet="+appletName+"&wid="+appletWid+"&ht="+appletHt; } function loadJSApplet(applet, containerDiv, width, height, iFrameSRC)   { appletName=applet;  appletWid=width; appletHt=height; appletContainerDiv=document.getElementById(containerDiv);  if(iFrameSRC==undefined) iFrameSrcFile="appletframe"; else iFrameSrcFile=iFrameSRC; loadActualApplet(); } function loadFlash(applet, width, height, iFrameSRC) { appletName=applet;  appletWid=width; appletHt=height;  if(iFrameSRC==undefined) iFrameSrcFile="appletframe"; else iFrameSrcFile=iFrameSRC; var scripts=document.getElementsByTagName('script'); var tgt=scripts[scripts.length-1]; appletContainerDiv=tgt.parentNode; device=navigator.userAgent.toLowerCase(); var tablet=device.indexOf("ipad")>=0 || device.indexOf("iphone")>=0 || device.indexOf('android')>=0;  if( tablet || tabletMode()) { loadActualApplet();  return; }   appletLoadRq=applet; widthLoadRq=width; heightLoadRq=height;  htmlParams=document.location.search;  if (htmlParams[0]='?') htmlParams=htmlParams.substr(1, htmlParams.length-1);  htmlParams=htmlParams.toLowerCase(); htmlParams=htmlParams.replace(/\+/g,'%2B');  AC_FL_RunContent( 'codebase', 'http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0', 'width', width, 'height', height,  'quality', 'high', 'pluginspage', 'http://www.macromedia.com/go/getflashplayer', 'align', 'middle', 'play', 'true', 'loop', 'true', 'scale', 'showall', 'wmode', 'transparent', 'devicefont', 'false', 'id', 'flashapplet', 'bgcolor', '#ffffff', 'name', 'flashapplet', 'menu', 'true', 'allowFullScreen', 'true', 'allowScriptAccess','always', 'movie', 'flash/'+applet, 'salign', '' );  }   var isIE= (navigator.appVersion.indexOf("MSIE") !=-1) ? true : false; var isWin= (navigator.appVersion.toLowerCase().indexOf("win") !=-1) ? true : false; var isOpera=(navigator.userAgent.indexOf("Opera") !=-1) ? true : false; function ControlVersion() { var version; var axo; var e;  try {  axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7"); version=axo.GetVariable("$version"); } catch (e) { } if (!version) { try {  axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");     version="WIN 6,0,21,0";  axo.AllowScriptAccess= "always";  version=axo.GetVariable("$version"); } catch (e) { } } if (!version) { try {  axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3"); version=axo.GetVariable("$version"); } catch (e) { } } if (!version) { try {  axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash.3"); version="WIN 3,0,18,0"; } catch (e) { } } if (!version) { try {  axo=new ActiveXObject("ShockwaveFlash.ShockwaveFlash"); version="WIN 2,0,0,11"; } catch (e) { version=-1; } } return version; }  function GetSwfVer(){  var flashVer=-1; if (navigator.plugins !=null && navigator.plugins.length > 0) { if (navigator.plugins["Shockwave Flash 2.0"] || navigator.plugins["Shockwave Flash"]) { var swVer2=navigator.plugins["Shockwave Flash	2.0"] ? " 2.0" : ""; var flashDescription=navigator.plugins["Shockwave	Flash" + swVer2].description; var descArray= flashDescription.split(" "); var tempArrayMajor=descArray[2].split("."); var versionMajor=tempArrayMajor[0]; var versionMinor=tempArrayMajor[1]; var versionRevision=descArray[3]; if (versionRevision=="") { versionRevision=descArray[4]; } if (versionRevision[0]=="d") { versionRevision=versionRevision.substring(1); } else if (versionRevision[0]=="r") { versionRevision=versionRevision.substring(1); if (versionRevision.indexOf("d") > 0) { versionRevision=versionRevision.substring(0, versionRevision.indexOf("d")); } } var flashVer=versionMajor + "." + versionMinor + "." + versionRevision; } }  else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.6") !=-1) flashVer=4;  else if (navigator.userAgent.toLowerCase().indexOf("webtv/2.5") !=-1) flashVer=3;  else if (navigator.userAgent.toLowerCase().indexOf("webtv") !=-1) flashVer=2; else if ( isIE && isWin && !isOpera ) { flashVer=ControlVersion(); } return flashVer; }  function DetectFlashVer(reqMajorVer, reqMinorVer, reqRevision) { versionStr=GetSwfVer(); if (versionStr==-1 ) { return false; } else if (versionStr !=0) { if(isIE && isWin && !isOpera) {  tempArray= versionStr.split(" ");  tempString= tempArray[1];  versionArray= tempString.split(",");  } else { versionArray= versionStr.split("."); } var versionMajor= versionArray[0]; var versionMinor= versionArray[1]; var versionRevision= versionArray[2];  if (versionMajor > parseFloat(reqMajorVer)) { return true; } else if (versionMajor==parseFloat(reqMajorVer)) { if (versionMinor > parseFloat(reqMinorVer)) return true; else if (versionMinor==parseFloat(reqMinorVer)) { if (versionRevision >=parseFloat(reqRevision)) return true; } } return false; } } function AC_AddExtension(src, ext) { if (src.indexOf('?') !=-1) return src.replace(/\?/, ext+'?'); else return src + ext; } function AC_Generateobj(objAttrs, params, embedAttrs) { var str= ''; if (isIE && isWin && !isOpera) { str +='<object	'; for (var i in objAttrs) { str +=i + '="' + objAttrs[i] + '" '; } str +='>'; for (var i in params) { str +='<param name="' + i + '" value="' + params[i] + '"	/> '; } str +=' <PARAM NAME=FlashVars VALUE="'+htmlParams+'">'; str +=' </object>'; } else { str +='<embed '; for (var i in embedAttrs) { str +=i + '="' + embedAttrs[i] + '" '; } str +='FlashVars="'+htmlParams+'"\n'; str +='> </embed>'; } document.write(str); } function AC_FL_RunContent() { var ret= AC_GetArgs (arguments, ".swf" , "movie" , "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" , "application/x-shockwave-flash" ); AC_Generateobj(ret.objAttrs, ret.params, ret.embedAttrs); } function AC_GetArgs(args, ext, srcParamName, classid, mimeType){ var ret= new Object(); ret.embedAttrs=new Object(); ret.params=new Object(); ret.objAttrs=new Object(); for (var i=0; i < args.length; i=i+2){ var currArg=args[i].toLowerCase(); switch (currArg){ case "classid": break; case "pluginspage": ret.embedAttrs[args[i]]=args[i+1]; break; case "src": case "movie": args[i+1]= AC_AddExtension(args[i+1], ext); ret.embedAttrs["src"]= args[i+1]; ret.params[srcParamName]=args[i+1]; break; case "onafterupdate": case "onbeforeupdate": case "onblur": case "oncellchange": case "onclick": case "ondblclick": case "ondrag": case "ondragend": case "ondragenter": case "ondragleave": case "ondragover": case "ondrop": case "onfinish": case "onfocus": case "onhelp": case "onmousedown": case "onmouseup": case "onmouseover": case "onmousemove": case "onmouseout": case "onkeypress": case "onkeydown": case "onkeyup": case "onload": case "onlosecapture": case "onpropertychange": case "onreadystatechange": case "onrowsdelete": case "onrowenter": case "onrowexit": case "onrowsinserted": case "onstart": case "onscroll": case "onbeforeeditfocus": case "onactivate": case "onbeforedeactivate": case "ondeactivate": case "type": case "codebase": case "id": ret.objAttrs[args[i]]= args[i+1]; break; case "width": case "height": case "align": case "vspace": case "hspace": case "class": case "title": case "accesskey": case "name": case "tabindex": ret.embedAttrs[args[i]]=ret.objAttrs[args[i]]=args[i+1]; break; default: ret.embedAttrs[args[i]]=ret.params[args[i]]= args[i+1]; } } ret.objAttrs["classid"]= classid; if (mimeType) ret.embedAttrs["type"]=mimeType; return ret; } function openLarge(params) { var viewerPage="fsview.html?" + params; var windowOptions="toolbar=no,,left=0,top=0,screenX=0,screenY=0,height="+screen.availHeight+",width="+screen.availWidth; open(viewerPage , '_blank', windowOptions); } function closeLarge() { window.close(); }  var winWidth=0, winHeight=0; function getWindowSize() { if( typeof( window.innerWidth )=='number' )  { winWidth=window.innerWidth; winHeight=window.innerHeight; } else if( document.documentElement && ( document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {  winWidth=document.documentElement.clientWidth; winHeight=document.documentElement.clientHeight; } else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {  winWidth=document.body.clientWidth; winHeight=document.body.clientHeight; } }  var tgtAddress;  var linkwindow; function makeLink(linkAddress) { tgtAddress=linkAddress;  if(typeof(linkwindow)!="undefined") linkwindow.close();  linkwindow= window.open('graphlinks.html', 'mywindow', 'width=600,height=450,status=yes,resizable=true,scrollbars=yes,menubar=yes') } function done() { if(typeof(linkwindow)!="undefined") linkwindow.close(); }  function bookmarkPageIE(){} function bookmarkSiteIE() {}
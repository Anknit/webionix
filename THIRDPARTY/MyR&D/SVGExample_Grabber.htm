<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>SVG Page </title>
    <script type="text/javascript">
        var pathdata = "";
        var pathnode;
        var bDraw = "false";
        var lastuniqueID = 0;
        var gCurrentObjectSelected = 0;
        var gCurrSelObjOriginX, gCurrSelObjOriginY, gGrabberOriginX, gGrabberOriginY;
        var gCurrSelObjOrigWidth, gCurrSelObjOrigHeight;
        var gGrabberOrigWidth, gGrabberOrigHeight; 
        var gOrigMousePosX, gOrigMousePosY;
        var gsvgRootNode = 0;
        var bMove = false;
        var gCurrGrabber = 0;
        var bResize = false;
        var resizeDirection = ['NONE', 'E-RESIZE', 'NE-RESIZE', 'NW-RESIZE', 'N-RESIZE', 'SE-RESIZE', 'SW-RESIZE', 'S-RESIZE', 'W-RESIZE'];
        var gCurrDirection = 'NONE'; 
        
                //defining point structure
        sDimension.prototype.x = new Number(0);
        sDimension.prototype.y = new Number(0);
        sDimension.prototype.width = new Number(0);
        sDimension.prototype.height = new Number(0);

        function sDimension() {
            sDimension.prototype.x = new Number(0);
            sDimension.prototype.y = new Number(0);
            sDimension.prototype.width = new Number(0);
            sDimension.prototype.height = new Number(0); 
        }
        
        
        function OnDomBtnClick() {
            var svgNode = document.getElementById("SVG1");
            var text = svgNode.outerHTML;
            alert(text);
        }

        function OnToggleGrid(event) {
            var node= event.target;
            var state = node.getAttribute("data-gridshow");
            var svgbkgrnd = document.getElementById("background");

            if (state == "true") {
                node.setAttribute("data-gridshow", "false");
                svgbkgrnd.setAttribute( "visibility", "hidden");
            }
            else {
                node.setAttribute("data-gridshow", "true");
                svgbkgrnd.setAttribute("visibility", "visible");
            }
        }

        function OnMouseTestMode(evt) {
            var node = evt.target;
            var X = new Number(evt.clientX);
            var Y = new Number(evt.clientY);
            X = X - 8;
            Y = Y - 8;
            var str = "(" + X + "," + Y + ")";
            var node = document.getElementById("mouselocation");
            node.innerHTML = str;
        }
        
        function GetUniqueID() {
            lastuniqueID++;
            var ID = "SVG_" + lastuniqueID;
            var ret = document.getElementById(ID);
            if (!ret)
                return ID;
            else
                return GetUniqueID();
        }

        function OnSelection(evt) {
            var node = evt.target;
            if ((!gCurrentObjectSelected) || (gCurrentObjectSelected != node)) {
                SetSelection(node);
                return; 
            }
                 

            if (bMove == false) {
                gsvgRootNode.setAttribute("cursor", "move");

                //store the current coordinates
                gOrigMousePosX = evt.clientX;
                gOrigMousePosY = evt.clientY;

                //get init position of objects
                var pt = getInitObjDim(gCurrentObjectSelected);
                gCurrSelObjOriginX = pt.x;
                gCurrSelObjOriginY = pt.y;

                pt = getInitObjDim(gCurrGrabber);
                gGrabberOriginX = pt.x;
                gGrabberOriginY = pt.y;
                bMove = true;
                return;
            }
            if (bMove == true) {
                bMove = false;
                gsvgRootNode.setAttribute("cursor", "auto");
                return;                 
            }
            
                      
        }

        function SetSelection(objNode) {
            var node = objNode; 
            gCurrGrabber = document.getElementById("grabber");
            var x, y, w, h;
            var num;
            var initPoint; 
            if (!gsvgRootNode)
                gsvgRootNode = document.getElementById('rootsvg1');
            gCurrGrabber.setAttribute("visibility", "visible");

            if (node.nodeName == "rect") {
                initPoint = getInitObjDim(node);
                num = initPoint.x;
                gCurrSelObjOriginX = new Number(initPoint.x);
                num -= 5;
                x = num;

                y = initPoint.y;
                num = initPoint.y;
                gCurrSelObjOriginY = new Number(initPoint.y);
                num -= 5;
                y = num;

                w = node.getAttribute("width");
                num = new Number(w);
                num += 10;
                w = num;

                h = node.getAttribute("height");
                num = new Number(h);
                num += 10;
                h = num;

            }
            if (node.nodeName == "ellipse") {
                initPoint = getInitObjDim(node);
                x = initPoint.x;
                num = new Number(x);
                x = num;
                gCurrSelObjOriginX = new Number(x);

                y = initPoint.y;
                num = new Number(y);
                y = num;
                gCurrSelObjOriginY = new Number(y);

                w = node.getAttribute("rx");
                num = new Number(w);
                w = num;

                h = node.getAttribute("ry");
                num = new Number(h);
                h = num;

                x = x - w - 5;
                y = y - h - 5;
                w = 2 * w + 10;
                h = 2 * h + 10;

                //var dvalues = "M" + x + " " + y + "h" + w + "v" + h + "h-" + w + " z";
               // var dvalues = "M" + x + " " + y + " h" + w / 2 + " v-" + 30 + " v" + 30 + " h" + w / 2 + " v" + h / 2 + " v" + h / 2 + " h-" + w / 2 +
               // " h-" + w / 2 + " v-" + h / 2 + " z";
                // gCurrGrabber.setAttribute("d", dvalues);                
            }
            //gCurrGrabber.setAttribute("x",

            //if ((!gCurrentObjectSelected) || (gCurrentObjectSelected != node))
            
            
                gCurrentObjectSelected = node;
                gCurrGrabber.setAttribute("x", x);
                gCurrGrabber.setAttribute("y", y);
                gCurrGrabber.setAttribute("width", w);
                gCurrGrabber.setAttribute("height", h);
                gGrabberOriginX = new Number(x);
                gGrabberOriginY = new Number(y);
                gGrabberOrigWidth = w;
                gGrabberOrigHeight = h;                
                return;
            
        }
        
        
        function OnInitMode(evt) {

            //change the cursor to move
            if (!gCurrentObjectSelected)
                return;
            gsvgRootNode.setAttribute("cursor", "move");
            
            //store the current coordinates
            gOrigMousePosX = evt.clientX;
            gOrigMousePosY = evt.clientY;

            //get init position of objects
            var pt = getInitObjDim(gCurrentObjectSelected);
            gCurrSelObjOriginX = pt.x;
            gCurrSelObjOriginY = pt.y;

            pt = getInitObjDim(gCurrGrabber);
            gGrabberOriginX = pt.x;
            gGrabberOriginY = pt.y;             
            bMove = true; 
            //alert("Init mode : X=" + gOrigMousePosX + "Y=" + gOrigMousePosY);         
        }
        function OnObjectMove(evt) {

            //trap new coordiantes and store the relative mouse coordinaes
            var newX, newY;
            if (bMove != true) {                
                return; 
            }
               
            if (!gCurrentObjectSelected)
                return;                 
            newX = new Number(evt.clientX);
            newY = new Number(evt.clientY);
            newX = newX - gOrigMousePosX;
            newY = newY - gOrigMousePosY;

            var newGrabX = gGrabberOriginX + newX;
            var newGrabY = gGrabberOriginY + newY;             
            var objNode  = document.getElementById("grabber");
            MoveObject(objNode, newGrabX, newGrabY);

            var newObjX = gCurrSelObjOriginX + newX;
            var newObjY = gCurrSelObjOriginY + newY;
            MoveObject(gCurrentObjectSelected, newObjX, newObjY); 
            
        
        //now move the object and the grabber by that much 
        
        }
        function OnEndMode(evt) {
            //change the cursor back to normal
            gsvgRootNode.setAttribute("cursor", "auto");            
            bMove = false; 
           // alert("Back to normal cursor in Mouse up ");
        }
        function OnExitBoundary(evt) {
         //   gsvgRootNode.setAttribute("cursor", "auto");
         //   alert("Back to normal cursor in Mouse out");
        }

        function MoveObject(ObjectNode, x, y) {
            var nodename = ObjectNode.nodeName;
            if (nodename == 'rect') {
                ObjectNode.setAttribute("x", x);
                ObjectNode.setAttribute("y", y);
            }
            else if (nodename == 'ellipse') {
            ObjectNode.setAttribute("cx", x);
            ObjectNode.setAttribute("cy", y);
        }
    }

    function ResizeObject(ObjectNode, Width, Height) {
        var nodename = ObjectNode.nodeName;
        if (nodename == 'rect') {
            ObjectNode.setAttribute("width", Width);
            ObjectNode.setAttribute("height", Height);
        }
        else if (nodename == 'ellipse') {
            ObjectNode.setAttribute("rx", Width);
            ObjectNode.setAttribute("ry", Height);
        }
    }

     function getInitObjDim(ObjNode) {

         var mypoint = new sDimension();
         var x, y, width, height; 
         if (ObjNode.nodeName == 'rect') {
             x = ObjNode.getAttribute('x');
             y = ObjNode.getAttribute('y');
             width = ObjNode.getAttribute('width');
             height = ObjNode.getAttribute('height'); 
             
         }
         else if(ObjNode.nodeName == 'ellipse') {
             x = ObjNode.getAttribute('cx');
             y = ObjNode.getAttribute('cy');
             width = ObjNode.getAttribute('rx');
             height = ObjNode.getAttribute('ry');
         }         
          mypoint.x = new Number(x);
          mypoint.y = new Number(y);
          mypoint.width = new Number(width);
          mypoint.height = new Number(height); 
          return mypoint;
      }
      function OnGrabberMouseMove(evt) {
          
          var node = evt.target;
          var newWidth, newHeight;
          var deltaY, deltaX; 
          deltaX = new Number(evt.clientX);
          //deltaX = deltaX - (gCurrSelObjOriginX + gCurrSelObjOrigWidth);
          deltaX = new Number(evt.clientX - (gGrabberOriginX + gGrabberOrigWidth));
          if (deltaX < 0)
              deltaX = 0 - deltaX;

          deltaY = new Number(evt.clientY - (gGrabberOriginY + gGrabberOrigHeight));
          if (deltaY < 0)
              deltaY = 0 - deltaY; 
              
          //alert("deltaX=" + deltaX + "deltaY=" + deltaY); 
          if ((0 < deltaX) && (deltaX < 10) && (deltaY > 10)) {
              gsvgRootNode.setAttribute("cursor", "E-RESIZE");
              gCurrDirection = "E-RESIZE";
          }
          else if ((0 < deltaY) && (deltaY < 10) && (deltaX > 10)) {
              gsvgRootNode.setAttribute("cursor", "N-RESIZE");
              gCurrDirection = "N-RESIZE";
          }
          else {
            //do nothing
          }      
          if (bResize == true) {
              //node.setAttribute("pointer-events", "all");
              var relX, relY;
              relX = new Number(evt.clientX - gOrigMousePosX);
              relY = new Number(evt.clientY - gOrigMousePosY);

              if (gCurrDirection == 'E-RESIZE') {
                  //resize the grabber first
                  newWidth = gGrabberOrigWidth + relX;
                  newHeight = gGrabberOrigHeight;
                  ResizeObject(gCurrGrabber, newWidth, newHeight);

                  newWidth  = gCurrSelObjOrigWidth + relX;
                  newHeight = gCurrSelObjOrigHeight;
                  ResizeObject(gCurrentObjectSelected, newWidth, newHeight);
              }
              else if (gCurrDirection == 'N-RESIZE') {
                  //resize the grabber first
                  newWidth = gGrabberOrigWidth ;
                  newHeight = gGrabberOrigHeight +relY;
                  ResizeObject(gCurrGrabber, newWidth, newHeight);

                  newWidth = gCurrSelObjOrigWidth ;
                  newHeight = gCurrSelObjOrigHeight + relY;
                  ResizeObject(gCurrentObjectSelected, newWidth, newHeight);
              }
          }
              
              
      }
      function OnGrabberClick(evt) {
          if (bResize == true) {
              gsvgRootNode.setAttribute("cursor", "auto");
              evt.target.setAttribute("pointer-events", "stroke");
              bResize = false;
              gCurrDirection = 'NONE';
              SetSelection(gCurrentObjectSelected);
              gCurrGrabber.setAttribute("stroke-opacity", "1.0"); 
          }
          else {
              if (gCurrDirection == "NONE")
                  return; 
              bResize = true;
              gOrigMousePosX = evt.clientX;
              gOrigMousePosY = evt.clientY;
              //trap the init dimension of grabber and object
              var dim = getInitObjDim(gCurrentObjectSelected);
              gCurrSelObjOrigWidth = dim.width;
              gCurrSelObjOrigHeight = dim.height;

              dim = getInitObjDim(gCurrGrabber);
              if (gCurrDirection == "E-RESIZE") {
                  gGrabberOrigWidth = dim.width + 20;
                  gGrabberOrigHeight = dim.height;
              }
              else if (gCurrDirection == "N-RESIZE") {
                  gGrabberOrigWidth = dim.width ;
                  gGrabberOrigHeight = dim.height +20;
              }
              
                          
              gCurrGrabber.setAttribute("stroke-opacity", "0.4");
              gCurrGrabber.setAttribute("width", gGrabberOrigWidth);
              gCurrGrabber.setAttribute("height", gGrabberOrigHeight);
              evt.target.setAttribute("pointer-events", "all");          
          }
      }
      function OnGrabberMouseOut(evt) {
        if(bResize == false)
            gsvgRootNode.setAttribute("cursor", "auto");
      }
    </script>
</head>
<body>

<!--
<svg id="rootsvg1" x="0px" y="0px" width="415px" height="415px" version="1.1"  viewBox="0 0 415 415" preserveAspectRatio="none" xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"  onmousedown="OnBeginDraw(evt)" onmousemove="OnDrawing(evt)" onmouseup="OnEndDraw(evt)" cursor="auto" pointer-events="none")>
 -->
 <svg id="rootsvg1" x="0px" y="0px" width="415px" height="415px" version="1.1"  viewBox="0 0 415 415" preserveAspectRatio="none" xmlns:xlink="http://www.w3.org/1999/xlink" 
     xmlns="http://www.w3.org/2000/svg"  cursor="auto" )>

  <svg id="background" width="100%" height="100%" visibility="visble" >
    <defs>
      <pattern id="gridpattern" patternUnits="userSpaceOnUse"  x="0" y="0" width="10" height="10"  viewBox="0 0 10 10" >
        <rect x="0" y="0" width="10" height="10" stroke="grey" stroke-width="0.5" fill="none"/>
      </pattern>
      <pattern id="bigrectpattern" patternUnits="userSpaceOnUse"  x="0" y="0" width="100" height="100"  viewBox="0 0 100 100" >
        <rect x="0" y="0" width="100" height="100" stroke="black" stroke-width="1" fill="url(#gridpattern)"/>
      </pattern> 
      
      
      
    </defs>    
    <defs>
        
        <marker id="circmarker"  viewBox="0 0 10 10" refX="5" refY="5"  markerUnits="strokeWidth"  markerWidth="4" markerHeight="3" orient="auto">
            <circle cx="5" cy="5" r="5" fill="black" />
        </marker>
    </defs>    
    <rect x="0" y="0" width="100%" height="100%"  fill="url(#bigrectpattern)" />
    
  </svg>     
    <svg id="svgcontent" width="100%" height="100%" >       
       
         <!--<rect id="grabber" x="0" y="0" width="20" height="20" stroke="blue" stroke-width="3" fill="none" stroke-dasharray="6 8"  marker-start="url(#circmarker)"/> -->
        
        
      <!--  <rect id="rect1" x="50" y="50" width="150" height="100" stroke="black" stroke-width="4" fill="red" onclick="OnSelection(evt)" 
        onmousedown="OnInitMode(evt)" onmousemove="OnObjectMove(evt)" onmouseup="OnEndMode(evt)" pointer-events="fill"  />        
        <ellipse id="ellp1" cx="150" cy="250" rx="100" ry="75" stroke="black" stroke-width="3" fill="yellow" onclick="OnSelection(evt)" 
         onmousedown="OnInitMode(evt)" onmousemove="OnObjectMove(evt)" onmouseup="OnEndMode(evt)" pointer-events="fill" />        
         -->    
         <rect id="rect1" x="50" y="50" width="150" height="100" stroke="black" stroke-width="4" fill="red" onclick="OnSelection(evt)" 
         onmousemove="OnObjectMove(evt)" pointer-events="fill"  />        
        <ellipse id="ellp1" cx="150" cy="250" rx="100" ry="75" stroke="black" stroke-width="3" fill="yellow" onclick="OnSelection(evt)" 
        onmousemove="OnObjectMove(evt)" pointer-events="fill" />     
    </svg> 
 <!-- <path id="grabber" d="M0 0 h50 v-50 v50 h50 v50 v50 h-50  h-50 v-50 z" stroke="blue" stroke-width="3" fill="none" stroke-dasharray="6 8"   
        marker-mid="url(#circmarker)" marker-end="url(#circmarker)" visibility="visible" onmousedown="OnInitMode(evt)" onmousemove="OnObjectMove(evt)"
        onmouseup="OnEndMode(evt)" pointer-events="all" onmouseout = "OnExitBoundary(evt)"/> -->
        <rect id="grabber" x="10" y="10" width="50" height="50" stroke="blue" stroke-width="3" fill="none" stroke-dasharray="none"   
        visibility="hidden"  pointer-events="stroke" onmousemove="OnGrabberMouseMove(evt)" onclick="OnGrabberClick(evt)" onmouseout="OnGrabberMouseOut(evt)" />
</svg>

<button onclick="OnToggleGrid(event)" data-gridshow="true">Toggle Grid</button>
<button onclick="OnStartDraw(event)">Draw Freehand</button>
<p>Mouse Point:<span id="mouselocation"></span></p>
</body>
</html>
